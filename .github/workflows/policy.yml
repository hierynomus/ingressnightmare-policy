
name: Build and Test Policy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RUST_TARGET: wasm32-unknown-unknown

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      K8S_OPENAPI_ENABLED_VERSION: "1.28"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ env.RUST_TARGET }}
        override: true

    - name: Install cargo-make
      run: cargo install --force cargo-make

    - name: Add wasm target
      run: rustup target add ${{ env.RUST_TARGET }}

    - name: Build policy
      run: cargo build --release --target ${{ env.RUST_TARGET }}

    - name: Install kwctl
      run: |
        curl -sSfL https://github.com/kubewarden/kwctl/releases/download/v1.23.0/kwctl-linux-x86_64.zip -o kwctl-linux-x86_64.zip
        unzip kwctl-linux-x86_64.zip
        chmod +x kwctl-linux-x86_64
        sudo mv kwctl-linux-x86_64 /usr/local/bin/kwctl


    - name: Run test cases
      run: |
        for test_case in tests/*.json; do
          echo "Running $test_case"
          settings=$(jq -c '.settings' "$test_case")
          request=$(jq -c '.request' "$test_case")
          expect_rejection=$(jq -r '.expect_rejection // false' "$test_case")
          echo "$request" > tmp-request.json

          if kwctl run --request-path tmp-request.json --settings-json "$settings" --policy-path target/${{ env.RUST_TARGET }}/release/policy.wasm > result.json 2>&1; then
            if [ "$expect_rejection" = "true" ]; then
              echo "❌ Expected rejection, but policy accepted $test_case"
              cat result.json
              exit 1
            else
              echo "✅ Accepted as expected: $test_case"
            fi
          else
            if [ "$expect_rejection" = "true" ]; then
              echo "✅ Rejected as expected: $test_case"
            else
              echo "❌ Unexpected rejection for $test_case"
              cat result.json
              exit 1
            fi
          fi
        done
